on:
  schedule:
  - cron:  "30 */2 * * *"
  workflow_dispatch:

jobs:
  update_repo_by_remote:

    runs-on: ubuntu-latest

    steps:
    - name: Git checkout
      uses: actions/checkout@v2
    - name: get_last_tag
      id: get_last_tag
      run: |
        echo ::set-output name=OLD_TAG::$(git tag -l | grep "^release-10.10-HF" | sort -V | tail -1)
    - name: get_remote_last_tag
      id: get_remote_last_tag
      run: |
        # setup the username and email. I tend to use 'GitHub Actions Bot' with no email by default
        git config user.name "GitHub Actions Bot"
        git config user.email "<>"
        # get_remote_last_tag
        echo ::set-output name=NEW_TAG::$(git ls-remote --tags --refs --exit-code --sort=-v:refname https://github.com/nuxeo/nuxeo.git |\
          awk -v parc=release-10.10-HF '$2~parc {print $2 |" sort -V"} ' |\
            tail -1 | xargs basename)
    - name: Update_repo_to_tag
      id: update_repo_to_tag
      run: |
        echo "new_tag=${{steps.get_remote_last_tag.outputs.NEW_TAG}}"
        echo "old_tag=${{steps.get_last_tag.outputs.OLD_TAG}}
        python clone.py ${{steps.get_remote_last_tag.outputs.NEW_TAG}} -a
        git add addons/ -f
        git reset addons/*/.git*
        git commit -m "${{steps.get_remote_last_tag.outputs.NEW_TAG}}"
        git push origin
        git remote add --tags -t 10.10 tmp_upstream https://github.com/nuxeo/nuxeo.git
        git fetch tmp_upstream 10.10 --quiet
        git merge ${{ steps.get_remote_last_tag.outputs.NEW_TAG }} -Xtheirs --allow-unrelated-histories
        git push origin ${{ steps.get_remote_last_tag.outputs.NEW_TAG }}
